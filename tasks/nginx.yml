---
# Prereqs
- name: create nginx group
  group: name=nginx state=present
- name: create nginx user
  user: name=nginx state=present createhome=no shell=/bin/false group=nginx
- name: create nginx data directory
  file: dest={{ nginx_base_data_dir }}/nginx state=directory owner=nginx group=nginx

# Online install - Currently Unavailable
#- name: online install | download nginx
#  get_url: url=http://tbc/nginx-{{ nginx_version }}.tar.gz dest=/var/tmp/nginx-{{ nginx_version }}.tar.gz
#- name: online install | extract nginx installation
#  unarchive: src=/var/tmp/nginx-{{ nginx_version }}.tar.gz copy=no dest={{ nginx_base_install_dir }}/ mode=0700 creates={{ nginx_base_install_dir }}/nginx-{{ nginx_version }}/sbin/nginx
#  notify:
#    - restart nginx
#  when: nginx_online_install

# Offline Install
- name: offline install | copy and extract nginx installation
  unarchive: src={{ nginx_installer_path }} dest={{ nginx_base_install_dir }}/ creates={{ nginx_base_install_dir }}/nginx-{{ nginx_version }}/sbin/nginx
  notify:
    - restart nginx
  when: not nginx_online_install

# Generate teardown
- name: generate teardown script
  template: src=teardown_nginx.sh.j2 dest={{ nginx_base_install_dir }}/teardown_nginx_{{ nginx_version }}.sh owner=root group=root mode=0750

# Configure
- name: configure nginx 
  template: src=nginx.conf.j2 dest={{ nginx_base_install_dir }}/nginx-{{ nginx_version }}/conf/nginx.conf owner=nginx group=nginx mode=0750
  notify:
    - restart nginx
- name: create servers and ssl directories
  file: dest={{ nginx_base_install_dir }}/nginx-{{ nginx_version }}/conf/{{ item }} state=directory owner=nginx group=nginx
  with_items:
    - servers
    - ssl
- name: install nginx startup script
  template: src=nginx-sysvinit.j2 dest=/etc/init.d/nginx owner=root group=root mode=0755
  notify:
    - restart nginx
  when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'
- name: install nginx startup script (Ubuntu)
  template: src=nginx-sysvinit-ubuntu.j2 dest=/etc/init.d/nginx owner=root group=root mode=0755
  notify:
    - restart nginx
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'

# Prepare runtime
- name: create nginx logs directory
  file: dest={{ nginx_base_logs_dir }}/nginx state=directory owner=nginx group=nginx mode=0750
- name: create symlink to nginx installation
  file: src={{ nginx_base_install_dir }}/nginx-{{ nginx_version }} path={{ nginx_base_install_dir }}/nginx state=link force=yes
- name: start nginx and ensure started on boot
  service: name=nginx state=started enabled=yes

